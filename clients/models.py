from django.db import models
from django.utils.timezone import now
from decimal import Decimal
from django.core.validators import MinValueValidator
# models.py
from django.db import models, transaction
from django.db.models import F
from django.utils.timezone import now


class Transaction(models.Model):
    TRANSACTION_TYPES = [
        ('income', '–î–æ—Ö–æ–¥'),
        ('expense', '–†–∞—Å—Ö–æ–¥'),
    ]

    id = models.AutoField(primary_key=True)
    type = models.CharField(max_length=10, choices=TRANSACTION_TYPES)
    name = models.CharField(max_length=255)
    amount = models.DecimalField(max_digits=12, decimal_places=2, validators=[MinValueValidator(Decimal('0.01'))])
    date = models.DateField(default=now)

    def __str__(self):
        return f"{self.get_type_display()} ‚Äî {self.name}: {self.amount}"


class Category(models.Model):
    """–ö–∞—Ç–µ–≥–æ—Ä–∏—è —Ç–æ–≤–∞—Ä–∞"""
    name = models.CharField(max_length=100, unique=True)

    def __str__(self):
        return self.name

    class Meta:
        verbose_name = "–ö–∞—Ç–µ–≥–æ—Ä–∏—è"
        verbose_name_plural = "–ö–∞—Ç–µ–≥–æ—Ä–∏–∏"


class Stock(models.Model):
    code          = models.CharField(max_length=50, unique=True)
    name          = models.CharField(max_length=255)
    price         = models.DecimalField(max_digits=10, decimal_places=2)
    price_seller  = models.DecimalField(max_digits=10, decimal_places=2, null=True, blank=True)
    quantity      = models.DecimalField(max_digits=10, decimal_places=2)
    fixed_quantity= models.DecimalField(
        max_digits=10,
        decimal_places=2,
        editable=False,          # üëà —Å–∫—Ä—ã—Ç–æ –≤ –∞–¥–º–∏–Ω-—Ñ–æ—Ä–º–µ
        null=True,
        verbose_name="–ü–æ–ª—É—á–µ–Ω–æ –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ"
    )
    unit          = models.CharField(max_length=50)
    date_added    = models.DateField(default=now)

    category      = models.ForeignKey(
        'Category',
        on_delete=models.SET_NULL,
        null=True, blank=True,
        related_name='stocks',
        verbose_name="–ö–∞—Ç–µ–≥–æ—Ä–∏—è"
    )

    # --- –º–∞–≥–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    def save(self, *args, **kwargs):
        # –ø—Ä–∏ –ø–µ—Ä–≤–æ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ (—Å–æ–∑–¥–∞–Ω–∏–µ) ‚Äî –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–∞—Ä—Ç–æ–≤—ã–π –æ—Å—Ç–∞—Ç–æ–∫
        if self.pk is None:
            self.fixed_quantity = self.quantity
        super().save(*args, **kwargs)

    def __str__(self):
        return f"{self.code} ‚Äî {self.name}"

    class Meta:
        verbose_name = "–°–∫–ª–∞–¥"
        verbose_name_plural = "–¢–æ–≤–∞—Ä—ã –Ω–∞ —Å–∫–ª–∞–¥–µ"


class SaleHistory(models.Model):
    payment_type = models.CharField(
        max_length=50,
        choices=[('cash', '–ù–∞–ª–∏—á–Ω—ã–µ'), ('card', '–ö–∞—Ä—Ç–∞')],
        verbose_name="–¢–∏–ø –æ–ø–ª–∞—Ç—ã"
    )
    total = models.DecimalField(max_digits=10, decimal_places=2, verbose_name="–ò—Ç–æ–≥–æ")
    date = models.DateTimeField(default=now, verbose_name="–î–∞—Ç–∞ –ø—Ä–æ–¥–∞–∂–∏")

    def __str__(self):
        return f"–ü—Ä–æ–¥–∞–∂–∞ –Ω–∞ {self.total} —Å–æ–º ‚Äî {self.date.strftime('%d.%m.%Y %H:%M')}"

    class Meta:
        verbose_name = "–ü—Ä–æ–¥–∞–∂–∞"
        verbose_name_plural = "–ü—Ä–æ–¥–∞–∂–∏"


class SaleItem(models.Model):
    sale = models.ForeignKey(SaleHistory, related_name="items", on_delete=models.CASCADE)
    code = models.CharField(max_length=100, verbose_name="–ö–æ–¥ —Ç–æ–≤–∞—Ä–∞")
    name = models.CharField(max_length=255, verbose_name="–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ")
    price = models.DecimalField(max_digits=10, decimal_places=2, verbose_name="–¶–µ–Ω–∞")
    quantity = models.PositiveIntegerField(verbose_name="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ")
    total = models.DecimalField(max_digits=10, decimal_places=2, verbose_name="–°—É–º–º–∞")

    def __str__(self):
        return f"{self.name} x{self.quantity}"


class StockMovement(models.Model):
    MOVEMENT_TYPES = [
        ('in', '–ü—Ä–∏—Ö–æ–¥'),
        ('sale', '–ü—Ä–æ–¥–∞–∂–∞'),
        ('return', '–í–æ–∑–≤—Ä–∞—Ç'),
        ('adjust', '–ö–æ—Ä—Ä–µ–∫—Ü–∏—è'),
    ]

    stock = models.ForeignKey(Stock, on_delete=models.CASCADE, related_name='movements')
    movement_type = models.CharField(max_length=10, choices=MOVEMENT_TYPES)
    quantity = models.DecimalField(max_digits=10, decimal_places=2)
    comment = models.CharField(max_length=255, blank=True, null=True)
    date = models.DateTimeField(default=now)

    sale = models.ForeignKey(
        SaleHistory,
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        related_name='stock_movements'
    )

    def __str__(self):
        return f"{self.get_movement_type_display()} {self.quantity} {self.stock.unit} ‚Äî {self.stock.name}"

    class Meta:
        verbose_name = "–î–≤–∏–∂–µ–Ω–∏–µ –ø–æ —Å–∫–ª–∞–¥—É"
        verbose_name_plural = "–î–≤–∏–∂–µ–Ω–∏—è –ø–æ —Å–∫–ª–∞–¥—É"



class ReturnItem(models.Model):
    # ‚¨áÔ∏è –±—ã–ª–æ OneToOneField ‚Üí –º–µ–Ω—è–µ–º –Ω–∞ ForeignKey
    sale_item = models.ForeignKey(
        'SaleItem',
        on_delete=models.CASCADE,
        related_name='return_records'
    )
    quantity = models.PositiveIntegerField()
    reason   = models.CharField(max_length=255, blank=True, null=True)
    date     = models.DateTimeField(default=now)

    def __str__(self):
        return f"–í–æ–∑–≤—Ä–∞—Ç {self.quantity} √ó {self.sale_item.name}"

    class Meta:
        verbose_name = "–í–æ–∑–≤—Ä–∞—Ç –ø–æ–∑–∏—Ü–∏–∏"
        verbose_name_plural = "–í–æ–∑–≤—Ä–∞—Ç—ã –ø–æ–∑–∏—Ü–∏–π"